/*
	Date: 04.07.2023
	Time: Too Long ;(
	Learnt: Don't overcomplicate with seg tree , you can use suffix/prefix Max/Min -> Notice what is important to the problem
	Rating: 1600
*/
#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
#define PI 3.14159265358979323846
#define sbits(x) __builtin_popcount(x)
#define tbits(total_size , num) total_size - __builtin_clz(num)
#define pb push_back
#define f first
#define s second
#define clr(ds) ds.clear()
#define all(ds) ds.begin() , ds.end()
#define pi pair<ll , ll>
#define vi vector<int>
#define vll vector<ll>
#define vpi vector<pi>
#define sz(i) (int)i.size()
#define rsz(ds ,size , val) ds.assign(size , val);
int xP[] = {0,0,1,-1,1,1,-1,-1} , yP[] = {1,-1,0,0,1,-1,-1,1};
using namespace std;
uint64_t time() {
  using namespace std::chrono;
  return duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
}
size_t hF(pair<int , int> a){
	return (a.first + a.second)*(a.first + a.second + 1)/2 + a.second;
}
void setIO(string name = "") {
	cin.tie(0)->sync_with_stdio(0);
	if (name.size()) {
		freopen((name + ".in").c_str(), "r", stdin);
		freopen((name + ".out").c_str(), "w", stdout);
	}
}
struct seg{
	vi tree;
	int n;
	seg(vi arr){
		n = sz(arr);
		while(sbits(n)!=1){
				n++;
				arr.pb(INT_MIN);
		}
		rsz(tree , 2*n , INT_MIN);
		for(int i = n;i<2*n;i++)
			tree[i]  = arr[i-n];
		for(int i =n-1;i>0;--i)
			tree[i] = max(tree[i*2] , tree[i*2+1]);
	}
	ll query(int l, int r){
			return get(0 , n-1 , l , r , 1);
	}
	ll get(int nL , int nR , int qL , int qR , int node){
		if(nL>qR || nR<qL)
			return INT_MIN;
		if(nL>=qL && nR<=qR)
			return tree[node];
		return max(get(nL , nL+(nR-nL)/2 , qL , qR , node*2) , get(nL+(nR-nL)/2+1 , nR , qL , qR , node*2+1));
	}
};
void solve(){
	int n;
	cin >> n;
	vi arr(n);
	for(int& a : arr)
		cin >> a;
	int q;
	cin >> q;
	map<int , pi> last;
	for(int i =0;i<n;i++){
		last[i] = {arr[i] , 0};
	}
	vll temp(q , INT_MIN);
	for(int i=0;i<q;i++){
		int a;
		cin >> a;
		if(a==1)
		{
			int b , c;
			cin >> b >> c, --b;
			last[b] = {c , i};
		} else {
			int b;
			cin >> b;
			temp[i] = b;
		}
	}	
	vll suffix(q , INT_MIN);
	suffix[q-1] = temp[q-1];
	for(int i = q-2;i>=0;--i)
		suffix[i] = max(suffix[i+1] , temp[i]);
	for(int i = 0;i<n;i++){
		auto p = last[i];
		cout << max(p.f , suffix[p.s]) << " " ;
	}
}

int main(){
	setIO();
	int t = 1;
// 	cin >> t;
	while(t--){
		solve();
	}	
}

